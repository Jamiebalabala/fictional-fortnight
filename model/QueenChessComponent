package model;

import view.ChessboardPoint;
import controller.ClickController;

import javax.imageio.ImageIO;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class QueenChessComponent extends ChessComponent {

    private static Image QUEEN_WHITE;
    private static Image QUEEN_BLACK;
    private Image queenImage;

    public QueenChessComponent(ChessboardPoint chessboardPoint, Point location, ChessColor color, ClickController listener, int size,char name) {
        super(chessboardPoint, location, color, listener, size,name);
        initiateQueenImage(color);
    }

    @Override
    public void loadResource() throws IOException {
        if (QUEEN_WHITE == null) {
            QUEEN_WHITE = ImageIO.read(new File("./images/queen-white.png"));
        }

        if (QUEEN_BLACK == null) {
            QUEEN_BLACK = ImageIO.read(new File("./images/queen-black.png"));
        }
    }

    private void initiateQueenImage(ChessColor color) {
        try {
            loadResource();
            if (color == ChessColor.WHITE) {
                queenImage = QUEEN_WHITE;
            } else if (color == ChessColor.BLACK) {
                queenImage = QUEEN_BLACK;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean canMoveTo(ChessComponent[][] chessComponents, ChessboardPoint destination) {
        boolean heng = true;
        boolean xie = true;
        ChessboardPoint source = getChessboardPoint();
        double a = Math.signum(destination.getX() - source.getX());
        double b = Math.signum(destination.getY() - source.getY());
        if (Math.abs(destination.getX() - source.getX()) != Math.abs(destination.getY() - source.getY())) {
            xie = false;
        }
        for (int i = 1; i < Math.abs(destination.getX() - source.getX()); i++) {
            if (!(chessComponents[(int) (source.getX() + a * i)][(int) (source.getY() + b * i)] instanceof EmptySlotComponent)) {
                xie = false;
            }
        }

        if (source.getX() == destination.getX()) {
            int row = source.getX();
            for (int col = Math.min(source.getY(), destination.getY()) + 1;
                 col < Math.max(source.getY(), destination.getY()); col++) {
                if (!(chessComponents[row][col] instanceof EmptySlotComponent)) {
                    heng = false;
                }
            }
        } else if (source.getY() == destination.getY()) {
            int col = source.getY();
            for (int row = Math.min(source.getX(), destination.getX()) + 1;
                 row < Math.max(source.getX(), destination.getX()); row++) {
                if (!(chessComponents[row][col] instanceof EmptySlotComponent)) {
                    heng = false;
                }
            }
        } else { // Not on the same row or the same column.
            heng = false;
        }
        return xie || heng;
    }

    @Override
    public List<ChessboardPoint> cMoveTo(ChessComponent[][] chessboard) {
        List<ChessboardPoint> list = new ArrayList<>();
        for (int i = getChessboardPoint().getX()+1; i < 8; i++){
            if (chessboard[i][getChessboardPoint().getY()].getChessColor() == ChessColor.NONE){
                list.add(new ChessboardPoint(i, getChessboardPoint().getY()));
            }
            else if (chessboard[i][getChessboardPoint().getY()].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(i, getChessboardPoint().getY()));
                break;
            }
            else break;
        }
        for (int i = getChessboardPoint().getX()-1; i >=0; i--){
            if (chessboard[i][getChessboardPoint().getY()].getChessColor() == ChessColor.NONE){
                list.add(new ChessboardPoint(i, getChessboardPoint().getY()));
            }
            else if (chessboard[i][getChessboardPoint().getY()].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(i, getChessboardPoint().getY()));
                break;
            }
            else break;
        }
        for (int i = getChessboardPoint().getY() +1; i < 8; i++){
            if (chessboard[getChessboardPoint().getX()][i].getChessColor() == ChessColor.NONE){
                list.add(new ChessboardPoint(getChessboardPoint().getX(),i));}
            else if (chessboard[getChessboardPoint().getX()][i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX(),i));
                break;
            }
            else break;
        }
        for (int i = getChessboardPoint().getY() -1; i >=0; i--){
            if (chessboard[getChessboardPoint().getX()][i].getChessColor() == ChessColor.NONE){
                list.add(new ChessboardPoint(getChessboardPoint().getX(),i));
            }
            else if (chessboard[getChessboardPoint().getX()][i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX(),i));
                break;
            }
            else break;
        }
        int i;
        i = 1;
        while (getChessboardPoint().getX() +i < 8 && getChessboardPoint().getY() +i<8){
            if (chessboard[getChessboardPoint().getX()+i][getChessboardPoint().getY() +i].getChessColor() ==ChessColor.NONE)
                list.add(new ChessboardPoint(getChessboardPoint().getX()+i, getChessboardPoint().getY()+i));
            else if (chessboard[getChessboardPoint().getX()+i][getChessboardPoint().getY()+i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX()+i,getChessboardPoint().getY()+i));
                break;
            }
            else break;
            i++;
        }

        i = 1;
        while (getChessboardPoint().getX() -i >=0 && getChessboardPoint().getY() +i<8){
            if (chessboard[getChessboardPoint().getX()-i][getChessboardPoint().getY() +i].getChessColor() ==ChessColor.NONE)
                list.add(new ChessboardPoint(getChessboardPoint().getX()-i, getChessboardPoint().getY()+i));
            else if (chessboard[getChessboardPoint().getX()-i][getChessboardPoint().getY()+i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX()-i,getChessboardPoint().getY()+i));
                break;
            }
            else break;
            i++;
        }
        i = 1;
        while (getChessboardPoint().getX() +i < 8 && getChessboardPoint().getY() -i>=0){
            if (chessboard[getChessboardPoint().getX()+i][getChessboardPoint().getY() -i].getChessColor() ==ChessColor.NONE)
                list.add(new ChessboardPoint(getChessboardPoint().getX()+i, getChessboardPoint().getY()-i));
            else if (chessboard[getChessboardPoint().getX()+i][getChessboardPoint().getY()-i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX()+i,getChessboardPoint().getY()-i));
                break;
            }
            else break;
            i++;
        }
        i = 1;
        while (getChessboardPoint().getX() -i>=0 && getChessboardPoint().getY() -i>=0){
            if (chessboard[getChessboardPoint().getX()-i][getChessboardPoint().getY() -i].getChessColor() ==ChessColor.NONE)
                list.add(new ChessboardPoint(getChessboardPoint().getX()-i, getChessboardPoint().getY()-i));
            else if (chessboard[getChessboardPoint().getX()-i][getChessboardPoint().getY()-i].getChessColor() !=getChessColor()){
                list.add(new ChessboardPoint(getChessboardPoint().getX()-i,getChessboardPoint().getY()-i));
                break;
            }
            else break;
            i++;
        }
        return list;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
//        g.drawImage(rookImage, 0, 0, getWidth() - 13, getHeight() - 20, this);
        g.drawImage(queenImage, 0, 0, getWidth(), getHeight(), this);
        g.setColor(Color.BLACK);
        if (isSelected()) {
            g.setColor(Color.RED);
            g.drawOval(0, 0, getWidth(), getHeight());
        }
    }
}



