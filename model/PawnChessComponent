
package model;

import view.ChessboardPoint;
import controller.ClickController;

import javax.imageio.ImageIO;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class PawnChessComponent extends ChessComponent {

    private static Image PAWN_WHITE;
    private static Image PAWN_BLACK;
    private Image pawnImage;

    public PawnChessComponent(ChessboardPoint chessboardPoint, Point location, ChessColor color, ClickController listener, int size,char name) {
        super(chessboardPoint, location, color, listener, size,name);
        initiatePawnImage(color);
    }

    @Override
    public void loadResource() throws IOException {
        if (PAWN_WHITE == null) {
            PAWN_WHITE = ImageIO.read(new File("./images/pawn-white.png"));
        }

        if (PAWN_BLACK == null) {
            PAWN_BLACK = ImageIO.read(new File("./images/pawn-black.png"));
        }
    }

    private void initiatePawnImage(ChessColor color) {
        try {
            loadResource();
            if (color == ChessColor.WHITE) {
                pawnImage = PAWN_WHITE;
            } else if (color == ChessColor.BLACK) {
                pawnImage = PAWN_BLACK;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean canMoveTo(ChessComponent[][] chessComponents, ChessboardPoint destination) {
        ChessboardPoint source = getChessboardPoint();
        if (chessComponents[source.getX()][source.getY()].chessColor == ChessColor.BLACK) {
            if (source.getX() + 1 == destination.getX() && (source.getY() == destination.getY() + 1 || source.getY() == destination.getY() - 1)) {
                if (chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.WHITE) {
                    return true;
                }
            }
        } else if (chessComponents[source.getX()][source.getY()].chessColor == ChessColor.WHITE) {
            if (source.getX() - 1 == destination.getX() && (source.getY() == destination.getY() + 1 || source.getY() == destination.getY() - 1)) {
                if (chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.BLACK) {
                    return true;
                }
            }
        }
        if (destination.getY() == source.getY()) {
            if (chessComponents[source.getX()][source.getY()].chessColor == ChessColor.BLACK) {
                if (source.getX() == 1) {
                    if (destination.getX() == 2 || destination.getX() == 3) {
                        if (chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.NONE)
                            return true;
                    }
                } else {
                    if (destination.getX() == source.getX() + 1 &&
                            chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.NONE) {
                        return true;
                    }
                }
            } else if (chessComponents[source.getX()][source.getY()].chessColor == ChessColor.WHITE) {
                if (source.getX() == 6) {
                    if (destination.getX() == 5 || destination.getX() == 4) {
                        if (chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.NONE)
                            return true;
                    }
                } else {
                    if (destination.getX() == source.getX() - 1) {
                        if (chessComponents[destination.getX()][destination.getY()].chessColor == ChessColor.NONE)
                            return true;
                    }
                }
            } else return false;
        }
        return false;
    }

    @Override
    public List<ChessboardPoint> cMoveTo(ChessComponent[][] chessboard) {
        List<ChessboardPoint> cs = new ArrayList<>();

        if (this.getChessColor().equals(ChessColor.BLACK)) {
            if (this.getChessboardPoint().getX() == 1) {
                for (int i = 1; i < 3; i++) {
                    if (chessboard[this.getChessboardPoint().getX() + i][this.getChessboardPoint().getY()].getChessColor().equals(ChessColor.NONE)) {
                        cs.add(this.getChessboardPoint().offset(i, 0));
                    } else {
                        break;
                    }
                }
            } else {
                if (this.getChessboardPoint().getX() + 1 < 8) {
                    if (chessboard[this.getChessboardPoint().getX() + 1][this.getChessboardPoint().getY()].getChessColor().equals(ChessColor.NONE)) {
                        cs.add(this.getChessboardPoint().offset(1, 0));
                    }
                }
            }

            if (this.getChessboardPoint().getX() + 1 >= 0 && this.getChessboardPoint().getX() + 1 < 8 && this.getChessboardPoint().getY() + 1 >= 0 && this.getChessboardPoint().getY() + 1 < 8) {
                if (chessboard[this.getChessboardPoint().getX() + 1][this.getChessboardPoint().getY() + 1].getChessColor().equals(ChessColor.WHITE)) {
                    cs.add(this.getChessboardPoint().offset(1, 1));
                }
            }
            if (this.getChessboardPoint().getX() + 1 >= 0 && this.getChessboardPoint().getX() + 1 < 8 && this.getChessboardPoint().getY() - 1 >= 0 && this.getChessboardPoint().getY() - 1 < 8) {
                if (chessboard[this.getChessboardPoint().getX() + 1][this.getChessboardPoint().getY() - 1].getChessColor().equals(ChessColor.WHITE)) {
                    cs.add(this.getChessboardPoint().offset(1, -1));
                }
            }
        }


        if (this.getChessColor().equals(ChessColor.WHITE)) {
            if (this.getChessboardPoint().getX() == 6) {
                for (int i = 1; i < 3; i++) {
                    if (chessboard[this.getChessboardPoint().getX() - i][this.getChessboardPoint().getY()].getChessColor().equals(ChessColor.NONE)) {
                        cs.add(this.getChessboardPoint().offset(-i, 0));
                    } else {
                        break;
                    }
                }
            } else {
                if (this.getChessboardPoint().getX() - 1 >= 0) {
                    if (chessboard[this.getChessboardPoint().getX() - 1][this.getChessboardPoint().getY()].getChessColor().equals(ChessColor.NONE)) {
                        cs.add(this.getChessboardPoint().offset(-1, 0));
                    }
                }
            }

            if (this.getChessboardPoint().getX() - 1 >= 0 && this.getChessboardPoint().getX() - 1 < 8 && this.getChessboardPoint().getY() + 1 >= 0 && this.getChessboardPoint().getY() + 1 < 8) {
                if (chessboard[this.getChessboardPoint().getX() - 1][this.getChessboardPoint().getY() + 1].getChessColor().equals(ChessColor.BLACK)) {
                    cs.add(this.getChessboardPoint().offset(-1, 1));
                }
            }
            if (this.getChessboardPoint().getX() - 1 >= 0 && this.getChessboardPoint().getX() - 1 < 8 && this.getChessboardPoint().getY() - 1 >= 0 && this.getChessboardPoint().getY() - 1 < 8) {
                if (chessboard[this.getChessboardPoint().getX() - 1][this.getChessboardPoint().getY() - 1].getChessColor().equals(ChessColor.BLACK)) {
                    cs.add(this.getChessboardPoint().offset(-1, -1));
                }
            }
        }
        return cs;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
//        g.drawImage(rookImage, 0, 0, getWidth() - 13, getHeight() - 20, this);
        g.drawImage(pawnImage, 0, 0, getWidth(), getHeight(), this);
        g.setColor(Color.BLACK);
        if (isSelected()) {
            g.setColor(Color.RED);
            g.drawOval(0, 0, getWidth(), getHeight());
        }
    }

    protected void paintCanMoveTo(Graphics g){
        super.paintComponent(g);
        for (int i = 0; i <this.cMoveTo(this.chessboard).size(); i++){
            g.setColor(Color.RED);
            g.drawOval(0, 0,getWidth(), getHeight());
        }
    }
}



