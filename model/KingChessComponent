
package model;

import view.ChessboardPoint;
import controller.ClickController;

import javax.imageio.ImageIO;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class KingChessComponent extends ChessComponent {

    private static Image KING_WHITE;
    private static Image KING_BLACK;
    private Image kingImage;

    public KingChessComponent(ChessboardPoint chessboardPoint, Point location, ChessColor color, ClickController listener, int size,char name) {
        super(chessboardPoint, location, color, listener, size,name);
        initiateKingImage(color);
    }

    @Override
    public void loadResource() throws IOException {
        if (KING_WHITE == null) {
            KING_WHITE = ImageIO.read(new File("./images/king-white.png"));
        }

        if (KING_BLACK == null) {
            KING_BLACK = ImageIO.read(new File("./images/king-black.png"));
        }
    }

    private void initiateKingImage(ChessColor color) {
        try {
            loadResource();
            if (color == ChessColor.WHITE) {
                kingImage = KING_WHITE;
            } else if (color == ChessColor.BLACK) {
                kingImage = KING_BLACK;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean canMoveTo(ChessComponent[][] chessComponents, ChessboardPoint destination) {
        ChessboardPoint source = getChessboardPoint();
        if (Math.abs(source.getX() - destination.getX()) > 1 || Math.abs(source.getY() - destination.getY()) > 1) {
            return false;
        }
        return true;

    }

    @Override
    public List<ChessboardPoint> cMoveTo(ChessComponent[][] chessboard) {
        List<ChessboardPoint> list = new ArrayList<>();
        if (getChessboardPoint().getY()+1 < 8){
            if (chessboard[getChessboardPoint().getX()][getChessboardPoint().getY()+1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX(),getChessboardPoint().getY()+1));}
        if (getChessboardPoint().getX()-1 >= 0){
            if (chessboard[getChessboardPoint().getX()-1][getChessboardPoint().getY()].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()-1,getChessboardPoint().getY()));}
        if (getChessboardPoint().getY()-1 >= 0){
            if (chessboard[getChessboardPoint().getX()][getChessboardPoint().getY()-1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX(),getChessboardPoint().getY()-1));}
        if (getChessboardPoint().getX()+1 < 8){
            if (chessboard[getChessboardPoint().getX()+1][getChessboardPoint().getY()].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()+1,getChessboardPoint().getY()));}
        if (getChessboardPoint().getY()+1 < 8 && getChessboardPoint().getX()+1 < 8){
            if (chessboard[getChessboardPoint().getX()+1][getChessboardPoint().getY()+1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()+1,getChessboardPoint().getY()+1));}
        if (getChessboardPoint().getY()+1 < 8 && getChessboardPoint().getX()-1 >=0){
            if (chessboard[getChessboardPoint().getX()-1][getChessboardPoint().getY()+1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()-1,getChessboardPoint().getY()+1));}
        if (getChessboardPoint().getY()-1 >=0 && getChessboardPoint().getX()-1 >=0){
            if (chessboard[getChessboardPoint().getX()-1][getChessboardPoint().getY()-1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()-1,getChessboardPoint().getY()-1));}
        if (getChessboardPoint().getY()-1 >=0 && getChessboardPoint().getX()+1 <8){
            if (chessboard[getChessboardPoint().getX()+1][getChessboardPoint().getY()-1].getChessColor() != getChessColor())
                list.add(new ChessboardPoint(getChessboardPoint().getX()+1,getChessboardPoint().getY()-1));}
        return list;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
//        g.drawImage(rookImage, 0, 0, getWidth() - 13, getHeight() - 20, this);
        g.drawImage(kingImage, 0, 0, getWidth(), getHeight(), this);
        g.setColor(Color.BLACK);
        if (isSelected()) {
            g.setColor(Color.RED);
            g.drawOval(0, 0, getWidth(), getHeight());
        }
    }
}



