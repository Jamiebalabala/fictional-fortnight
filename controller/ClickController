package controller;


import model.ChessColor;
import model.ChessComponent;
import model.KingChessComponent;
import view.ChessGameFrame;
import view.Chessboard;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.swing.*;
import java.awt.*;
import java.io.File;

public class ClickController {

    private final Chessboard chessboard;
    private ChessComponent first;
    protected ChessGameFrame g;

    public ChessGameFrame getG() {
        return g;
    }

    public void setG(ChessGameFrame g) {
        this.g = g;
    }

    public ClickController(Chessboard chessboard) {
        this.chessboard = chessboard;
    }



    public ChessComponent getFirst() {
        return first;
    }

    public void setFirst(ChessComponent first) {
        this.first = first;
    }

    public void onClick(ChessComponent chessComponent) {
        if (first == null) {
            if (handleFirst(chessComponent)) {
                chessComponent.setSelected(true);
                first = chessComponent;
                first.repaint();
                Clip clip;
                try {
                    File musicPath = new File("./music/Click.wav");

                    if (musicPath.exists()) {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
                        clip = AudioSystem.getClip();
                        clip.open(audioInput);
                        FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
                        gainControl.setValue(-10.0f);
                        clip.start();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                for (int i = 0; i < chessComponent.cMoveTo(chessboard.getChessComponents()).size(); i ++){
                    ChessComponent.setBackgroundColors(new Color[]{Color.ORANGE, Color.orange});
                    chessboard.getChessComponents()[chessComponent.cMoveTo(chessboard.getChessComponents()).get(i).getX()][chessComponent.cMoveTo(chessboard.getChessComponents()).get(i).getY()].repaint();
                }
            }
        } else {
            if (first == chessComponent) { // 再次点击取消选取
                chessComponent.setSelected(false);
                ChessComponent recordFirst = first;
                first = null;
                ChessComponent.setBackgroundColors(new Color[]{Color.PINK, Color.getHSBColor(124,248,120)});
                for (int i = 0; i < chessboard.getChessComponents().length; i ++){
                    for (int j =0; j < chessboard.getChessComponents()[i].length;j++){
                        chessboard.getChessComponents()[i][j].repaint();
                    }
                }
                recordFirst.repaint();
            } else if (handleSecond(chessComponent)) {
                //repaint in swap chess method.
                chessboard.swapChessComponents(first, chessComponent);
                chessboard.swapColor();
                ChessComponent.setBackgroundColors(new Color[]{Color.PINK, Color.getHSBColor(124,248,120)});
                for (int i = 0; i < chessboard.getChessComponents().length; i ++){
                    for (int j =0; j < chessboard.getChessComponents()[i].length;j++){
                        chessboard.getChessComponents()[i][j].repaint();
                    }
                }
                Clip clip;
                try {
                    File musicPath = new File("./music/Move.wav");

                    if (musicPath.exists()) {
                        AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
                        clip = AudioSystem.getClip();
                        clip.open(audioInput);
                        FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
                        gainControl.setValue(-10.0f);
                        clip.start();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                chessboard.changePawn(first);
                if (chessComponent instanceof KingChessComponent) {
                    if (chessComponent.getChessColor().equals(ChessColor.WHITE)) {
                        int result = JOptionPane.showConfirmDialog(chessboard, "WHITE WINS!\nDou you want to restart the game?", "Tips", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        if (result == JOptionPane.YES_OPTION) {

                            g.dispose();
                            g = new ChessGameFrame(1000, 760);
                            g.setVisible(true);
//                            g.dispose();
//                            ChessGameFrame chessGameFrame = new ChessGameFrame(1000, 760);
//                            chessGameFrame.setVisible(true);
                        } else {
                            System.exit(0);
                        }
                    }
                    if (chessComponent.getChessColor().equals(ChessColor.BLACK)) {
                        int result = JOptionPane.showConfirmDialog(chessboard, "BLACK WINS!\nDou you want to restart the game?", "Tips", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        if (result == JOptionPane.YES_OPTION) {
                            g.dispose();
                            g = new ChessGameFrame(1000, 760);
                            g.setVisible(true);
                        } else {
                            System.exit(0);
                        }
                    }

                }
                first.setSelected(false);
                first = null;
                ChessGameFrame.time0 = 31;
                if (chessboard.getCurrentColor().equals(ChessColor.BLACK)) {
                    ChessGameFrame.xingqifang.setText("BLACK's turn");
                } else {
                    ChessGameFrame.xingqifang.setText("WHITE's turn");
                }

            }
        }
    }

    /**
     * @param chessComponent 目标选取的棋子
     * @return 目标选取的棋子是否与棋盘记录的当前行棋方颜色相同
     */

    private boolean handleFirst(ChessComponent chessComponent) {
        return chessComponent.getChessColor() == chessboard.getCurrentColor();
    }

    /**
     * @param chessComponent first棋子目标移动到的棋子second
     * @return first棋子是否能够移动到second棋子位置
     */

    private boolean handleSecond(ChessComponent chessComponent) {
        return chessComponent.getChessColor() != chessboard.getCurrentColor() &&
                first.canMoveTo(chessboard.getChessComponents(), chessComponent.getChessboardPoint());
    }
}
